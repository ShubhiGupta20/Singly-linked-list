#include<stdio.h>
#include<stdlib.h>
struct node{
	int data;
	struct node *add;
}*head;
void main()
{
	printf("Enter the data for addbeg three times\n");
	addbeg();
	addbeg();
	addbeg();
	print();
	printf("enter the data for addend function\n");
	addend();
	print();
	printf("enter the data for adding at perticular position\n");
	int pos,data;
	printf("enter the value of pos\n");
	scanf("%d",&pos);
	printf("enter the data to be inserted\n");
	scanf("%d",&data);
	per_posi(data,pos);
	print();
	printf("Deletion at beginning\n");
	delbeg();
	print();
	printf("deletion at ending\n");
	delend();
	print();
	printf("middle of the linkedlist is:\n");
	middle();
	printf("middle of linked list through double pointer\n");
	mid_two_pointer();

}
//addbeg function
void addbeg()
{
	struct node *temp;
	int d;
	scanf("%d",&d);
	if (head==NULL)
	{
		head=(struct node*)malloc(sizeof(struct node));
		head->data=d;
		head->add=NULL;
	}
	else
	{
		struct node *temp;
		temp=(struct node*)malloc(sizeof(struct node));
		temp->data=d;
		temp->add=head;
		head=temp;
	}
}
//addend function
void addend()
{
	int d;
	scanf("%d",&d);
	struct node *temp;
	if(head==NULL)
	{
		head=(struct node *)malloc(sizeof(struct node));
		head->data=d;
		head->add=NULL;
	}
	else
	{
		struct node *next,*temp;
		next=(struct node *)malloc(sizeof(struct node));
		temp=head;
		while(temp->add!=NULL)
		{
		temp=temp->add;
	}
		next->data=d;
		next->add=NULL;
		temp->add=next;
	}
}
//insert at particular position
void per_posi(int data,int pos)
{
	int c=0;
	struct node*s;
	struct node*temp;
	temp=(struct node*)malloc(sizeof(struct node));
	s=head;
	while(c!=pos-1)
	{
		c++;
		s=s->add;
	}
	temp->data=data;
	temp->add=s->add;
	s->add=temp;
}
//delbeg
void delbeg()
{
	if(head==NULL)
	{
		printf("LINKED LIST DOES NOT EXIST");
	}
	else
	{
		struct node *ptr;
		ptr=(struct node *)malloc(sizeof(struct node));
		ptr=head;
		head=head->add;
		free(ptr);
			}
}
//delend function
void delend()
{
	struct node *s;
	s=(struct node *)malloc(sizeof(struct node));
	if(head==NULL)
	{
		printf("list doesnot exist");
	}
	else
	{
		s=head;
		struct node *prev;
		prev=(struct node *)malloc(sizeof(struct node));
		while(s->add!=NULL){
			prev=s;
			s=s->add;
		}
		prev->add=NULL;
		free(s);
	}
}
//delete at position
void del_posi(int d)
{
	struct node *s;
	s=(struct node *)malloc(sizeof(struct node));
	struct node *temp;
	temp=(struct node *)malloc(sizeof(struct node));
	s=head;
	while(s->add->add->data!=d)
	{
		s=s->add;
	}
	temp=s->add;
	s->add=s->add->add;
	free(temp);
}
//finding middle data of linkedlist
void middle()
{
	int c=0;
	struct node*s;
	s=(struct node*)malloc(sizeof(struct node));
	s=head;
	while(s!=NULL)
	{
		c++;
		s=s->add;
	}
	int mid=c/2;
	if(c&1==0)
	{
		mid-=1;
	}
	s=head;
	while(mid>0)
	{
		s=s->add;
		mid-=1;
	}
	printf("%d\n",s->data);
}
//using two pointers(middle of linkedlist)
void mid_two_pointer()
{
	struct node*A,*B;
	A=head;
	B=head;
	while(B!=NULL&&B->add!=NULL&&B->add->add!=NULL)
	{
		A=A->add;
		B=B->add->add;
	}
	printf("%d\n",A->data);
}
//print function
void print()
{
	struct node *temp;
	temp=head;
	while(temp!=NULL)
	{
		printf("%d\n",temp->data);
		temp=temp->add;
	}
}
